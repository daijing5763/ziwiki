// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: repo.sql

package db

import (
	"context"
)

const createRepo = `-- name: CreateRepo :one
INSERT INTO repos (
  user_id,
  repo_name
) VALUES ($1, $2) 
RETURNING id, user_id, repo_name, created_at
`

type CreateRepoParams struct {
	UserID   int32  `json:"user_id"`
	RepoName string `json:"repo_name"`
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, createRepo, arg.UserID, arg.RepoName)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRepo = `-- name: DeleteRepo :exec
DELETE FROM repos
WHERE id = $1
`

func (q *Queries) DeleteRepo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRepo, id)
	return err
}

const getRepo = `-- name: GetRepo :one
SELECT id, user_id, repo_name, created_at FROM repos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRepo(ctx context.Context, id int32) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.CreatedAt,
	)
	return i, err
}

const getRepoForUpdate = `-- name: GetRepoForUpdate :one
SELECT id, user_id, repo_name, created_at FROM repos
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetRepoForUpdate(ctx context.Context, id int32) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepoForUpdate, id)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.CreatedAt,
	)
	return i, err
}

const updateRepo = `-- name: UpdateRepo :one
UPDATE repos
SET repo_name=$2
WHERE id = $1
RETURNING id, user_id, repo_name, created_at
`

type UpdateRepoParams struct {
	ID       int32  `json:"id"`
	RepoName string `json:"repo_name"`
}

func (q *Queries) UpdateRepo(ctx context.Context, arg UpdateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, updateRepo, arg.ID, arg.RepoName)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.CreatedAt,
	)
	return i, err
}
