// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: repo.sql

package db

import (
	"context"
)

const createRepo = `-- name: CreateRepo :one
INSERT INTO repos (
  user_id,
  repo_name,
  repo_git,
  repo_user_name,
  repo_access_token
) VALUES ($1,$2,$3,$4,$5) 
RETURNING id, user_id, repo_name, repo_git, repo_user_name, repo_access_token, created_at
`

type CreateRepoParams struct {
	UserID          int64  `json:"user_id"`
	RepoName        string `json:"repo_name"`
	RepoGit         string `json:"repo_git"`
	RepoUserName    string `json:"repo_user_name"`
	RepoAccessToken string `json:"repo_access_token"`
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, createRepo,
		arg.UserID,
		arg.RepoName,
		arg.RepoGit,
		arg.RepoUserName,
		arg.RepoAccessToken,
	)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.RepoGit,
		&i.RepoUserName,
		&i.RepoAccessToken,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRepo = `-- name: DeleteRepo :exec
DELETE FROM repos
WHERE id = $1
`

func (q *Queries) DeleteRepo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRepo, id)
	return err
}

const getRepo = `-- name: GetRepo :one
SELECT id, user_id, repo_name, repo_git, repo_user_name, repo_access_token, created_at FROM repos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRepo(ctx context.Context, id int64) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.RepoGit,
		&i.RepoUserName,
		&i.RepoAccessToken,
		&i.CreatedAt,
	)
	return i, err
}

const getRepoForUpdate = `-- name: GetRepoForUpdate :one
SELECT id, user_id, repo_name, repo_git, repo_user_name, repo_access_token, created_at FROM repos
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetRepoForUpdate(ctx context.Context, id int64) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepoForUpdate, id)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.RepoGit,
		&i.RepoUserName,
		&i.RepoAccessToken,
		&i.CreatedAt,
	)
	return i, err
}

const listRepos = `-- name: ListRepos :many
SELECT id, user_id, repo_name, repo_git, repo_user_name, repo_access_token, created_at FROM repos
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListReposParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRepos(ctx context.Context, arg ListReposParams) ([]Repo, error) {
	rows, err := q.db.QueryContext(ctx, listRepos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repo{}
	for rows.Next() {
		var i Repo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RepoName,
			&i.RepoGit,
			&i.RepoUserName,
			&i.RepoAccessToken,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepo = `-- name: UpdateRepo :one
UPDATE repos
SET repo_name=$2
WHERE id = $1
RETURNING id, user_id, repo_name, repo_git, repo_user_name, repo_access_token, created_at
`

type UpdateRepoParams struct {
	ID       int64  `json:"id"`
	RepoName string `json:"repo_name"`
}

func (q *Queries) UpdateRepo(ctx context.Context, arg UpdateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, updateRepo, arg.ID, arg.RepoName)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RepoName,
		&i.RepoGit,
		&i.RepoUserName,
		&i.RepoAccessToken,
		&i.CreatedAt,
	)
	return i, err
}
