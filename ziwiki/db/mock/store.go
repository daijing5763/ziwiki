// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zdlpsina/ziwiki/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/zdlpsina/ziwiki/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMarkdown mocks base method.
func (m *MockStore) CreateMarkdown(arg0 context.Context, arg1 db.CreateMarkdownParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarkdown", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarkdown indicates an expected call of CreateMarkdown.
func (mr *MockStoreMockRecorder) CreateMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarkdown", reflect.TypeOf((*MockStore)(nil).CreateMarkdown), arg0, arg1)
}

// CreateRepo mocks base method.
func (m *MockStore) CreateRepo(arg0 context.Context, arg1 db.CreateRepoParams) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockStoreMockRecorder) CreateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockStore)(nil).CreateRepo), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteMarkdown mocks base method.
func (m *MockStore) DeleteMarkdown(arg0 context.Context, arg1 db.DeleteMarkdownParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMarkdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMarkdown indicates an expected call of DeleteMarkdown.
func (mr *MockStoreMockRecorder) DeleteMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMarkdown", reflect.TypeOf((*MockStore)(nil).DeleteMarkdown), arg0, arg1)
}

// DeleteMarkdownByRepo mocks base method.
func (m *MockStore) DeleteMarkdownByRepo(arg0 context.Context, arg1 db.DeleteMarkdownByRepoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMarkdownByRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMarkdownByRepo indicates an expected call of DeleteMarkdownByRepo.
func (mr *MockStoreMockRecorder) DeleteMarkdownByRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMarkdownByRepo", reflect.TypeOf((*MockStore)(nil).DeleteMarkdownByRepo), arg0, arg1)
}

// DeleteRepo mocks base method.
func (m *MockStore) DeleteRepo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockStoreMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockStore)(nil).DeleteRepo), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetMarkdown mocks base method.
func (m *MockStore) GetMarkdown(arg0 context.Context, arg1 db.GetMarkdownParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdown", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdown indicates an expected call of GetMarkdown.
func (mr *MockStoreMockRecorder) GetMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdown", reflect.TypeOf((*MockStore)(nil).GetMarkdown), arg0, arg1)
}

// GetMarkdownForUpdate mocks base method.
func (m *MockStore) GetMarkdownForUpdate(arg0 context.Context, arg1 db.GetMarkdownForUpdateParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdownForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdownForUpdate indicates an expected call of GetMarkdownForUpdate.
func (mr *MockStoreMockRecorder) GetMarkdownForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdownForUpdate", reflect.TypeOf((*MockStore)(nil).GetMarkdownForUpdate), arg0, arg1)
}

// GetRepo mocks base method.
func (m *MockStore) GetRepo(arg0 context.Context, arg1 int64) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockStoreMockRecorder) GetRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockStore)(nil).GetRepo), arg0, arg1)
}

// GetRepoForUpdate mocks base method.
func (m *MockStore) GetRepoForUpdate(arg0 context.Context, arg1 int64) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoForUpdate indicates an expected call of GetRepoForUpdate.
func (mr *MockStoreMockRecorder) GetRepoForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoForUpdate", reflect.TypeOf((*MockStore)(nil).GetRepoForUpdate), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserForUpdate mocks base method.
func (m *MockStore) GetUserForUpdate(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForUpdate indicates an expected call of GetUserForUpdate.
func (mr *MockStoreMockRecorder) GetUserForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForUpdate", reflect.TypeOf((*MockStore)(nil).GetUserForUpdate), arg0, arg1)
}

// ListRepos mocks base method.
func (m *MockStore) ListRepos(arg0 context.Context, arg1 db.ListReposParams) ([]db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", arg0, arg1)
	ret0, _ := ret[0].([]db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepos indicates an expected call of ListRepos.
func (mr *MockStoreMockRecorder) ListRepos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockStore)(nil).ListRepos), arg0, arg1)
}

// QueryMarkdownRepo mocks base method.
func (m *MockStore) QueryMarkdownRepo(arg0 context.Context, arg1 db.QueryMarkdownRepoParams) ([]db.QueryMarkdownRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkdownRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryMarkdownRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkdownRepo indicates an expected call of QueryMarkdownRepo.
func (mr *MockStoreMockRecorder) QueryMarkdownRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkdownRepo", reflect.TypeOf((*MockStore)(nil).QueryMarkdownRepo), arg0, arg1)
}

// QueryMarkdownUser mocks base method.
func (m *MockStore) QueryMarkdownUser(arg0 context.Context, arg1 db.QueryMarkdownUserParams) ([]db.QueryMarkdownUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkdownUser", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryMarkdownUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkdownUser indicates an expected call of QueryMarkdownUser.
func (mr *MockStoreMockRecorder) QueryMarkdownUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkdownUser", reflect.TypeOf((*MockStore)(nil).QueryMarkdownUser), arg0, arg1)
}

// UpdateMarkdown mocks base method.
func (m *MockStore) UpdateMarkdown(arg0 context.Context, arg1 db.UpdateMarkdownParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMarkdown", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMarkdown indicates an expected call of UpdateMarkdown.
func (mr *MockStoreMockRecorder) UpdateMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMarkdown", reflect.TypeOf((*MockStore)(nil).UpdateMarkdown), arg0, arg1)
}

// UpdateRepo mocks base method.
func (m *MockStore) UpdateRepo(arg0 context.Context, arg1 db.UpdateRepoParams) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockStoreMockRecorder) UpdateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockStore)(nil).UpdateRepo), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
